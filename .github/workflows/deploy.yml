name: Deploy - behind_proxy

on:
  push:
    branches: [ behind_proxy ]
  pull_request:
    branches: [ behind_proxy ]
  workflow_dispatch:

jobs:
  server_prep:
    name: Prepare infra on server
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Stop and delete all containers, stop nginx
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        password: ${{ secrets.SSH_PASSWORD }}
        script: |
          set +e
          docker ps -aq | xargs -r docker stop
          docker ps -aq | xargs -r docker rm
          sudo systemctl stop nginx
          set -e
    
    - name: Create a Webroot Directory for Certbot
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        password: ${{ secrets.SSH_PASSWORD }}
        script: |
          set -e
          sudo mkdir -p /var/www/certbot
          sudo chown -R www-data:www-data /var/www/certbot
    
    - name: Temporary Nginx Config for HTTP Challenge
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        password: ${{ secrets.SSH_PASSWORD }}
        script: |
          set -e
          sudo mkdir -p /etc/nginx/sites-available
          echo 'server {
              listen 80;
              server_name cloud.${{ secrets.HOST }} collabora.${{ secrets.HOST }} wopiserver.${{ secrets.HOST }};
              
              location /.well-known/acme-challenge/ {
                  root /var/www/certbot;
                  try_files $uri =404;
              }
              
              location / {
                  return 301 https://$host$request_uri;
              }
            }' | sudo tee /etc/nginx/sites-available/certbot-challenge >/dev/null
          sudo ln -sf /etc/nginx/sites-available/certbot-challenge /etc/nginx/sites-enabled/
          sudo nginx -t && sudo systemctl restart nginx

    - name: Obtain SSL Certificates
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        password: ${{ secrets.SSH_PASSWORD }}
        script: |
          set -e
          # Проверяем существование и срок действия сертификатов
          need_certbot=false
          domains=("cloud.${{ secrets.HOST }}" "collabora.${{ secrets.HOST }}" "wopiserver.${{ secrets.HOST }}")
          
          for domain in "${domains[@]}"; do
            cert_path="/etc/letsencrypt/live/$domain/fullchain.pem"
            if [ ! -f "$cert_path" ]; then
              echo "Certificate for $domain is missing."
              need_certbot=true
            else
              expiry_date=$(sudo openssl x509 -enddate -noout -in "$cert_path" | cut -d= -f2)
              expiry_epoch=$(date -d "$expiry_date" +%s)
              now_epoch=$(date +%s)
              days_left=$(( (expiry_epoch - now_epoch) / 86400 ))
              
              if [ "$days_left" -lt 7 ]; then
                echo "Certificate for $domain expires in $days_left days (on $expiry_date)."
                need_certbot=true
              else
                echo "Certificate for $domain is valid (expires on $expiry_date)."
              fi
            fi
          done
          
          if [ "$need_certbot" = true ]; then
            echo "Running certbot to obtain/renew certificates..."
            sudo certbot certonly --webroot \
              -w /var/www/certbot \
              -d cloud.${{ secrets.HOST }} \
              -d collabora.${{ secrets.HOST }} \
              -d wopiserver.${{ secrets.HOST }} \
              --email ${{ secrets.EMAIL }} \
              --agree-tos \
              --no-eff-email
          else
            echo "All certificates are valid, skipping certbot."
          fi

    - name: Create projects directories
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        password: ${{ secrets.SSH_PASSWORD }}
        script: |
          set -e
          sudo rm -rf opencloud-compose || true
          sudo mkdir -p opencloud-compose
          sudo chown -R ${{ secrets.USER }}:${{ secrets.USER }} opencloud-compose
          sudo chmod -R 755 opencloud-compose
          sudo mkdir -p opencloud-compose/{config,data}
          sudo chown -R 1000:1000 opencloud-compose

    - name: Copy project files
      shell: bash
      run: |
        set -e
        sshpass -p "${{ secrets.SSH_PASSWORD }}" scp -v -o StrictHostKeyChecking=no \
            -r . \
            ${{ secrets.USER }}@${{ secrets.HOST }}:/${{ secrets.USER }}/opencloud-compose

    - name: Create environment file
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        password: ${{ secrets.SSH_PASSWORD }}
        script: |
          set -e
          cd opencloud-compose
          if [ -f .env.example ]; then
            cp .env.example .env
            echo "OC_DOMAIN=cloud.${{ secrets.HOST }}" >> .env
            echo "TRAEFIK_DOMAIN=traefik.${{ secrets.HOST }}" >> .env
            echo "COLLABORA_DOMAIN=collabora.${{ secrets.HOST }}" >> .env
            echo "WOPISERVER_DOMAIN=wopiserver.${{ secrets.HOST }}" >> .env
            echo "ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}" >> .env
            echo "INITIAL_ADMIN_PASSWORD=${{ secrets.ADMIN_PASSWORD }}" >> .env
            echo "TRAEFIK_ACME_MAIL=${{ secrets.TRAEFIK_ACME_MAIL }}" >> .env
            echo "Environment file created and configured"
          else
            echo ".env.example not found, skipping .env creation"
            exit 1
          fi

  deploy:
    runs-on: ubuntu-latest
    needs:
      - server_prep
    outputs:
      container_status: ${{ steps.get_status.outputs.status }}
    steps:
    - name: Deploy containers
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        password: ${{ secrets.SSH_PASSWORD }}
        script: |
          set -e
          cd opencloud-compose
          docker compose up -d

    - name: Get container status
      id: get_status
      run: |
        sleep 15
        status=$(sshpass -p "${{ secrets.SSH_PASSWORD }}" ssh -o StrictHostKeyChecking=no \
          ${{ secrets.USER }}@${{ secrets.HOST }} \
          "docker ps -a --format 'table {{.Names}}\t{{.Status}}'")
        echo "status<<EOF" >> $GITHUB_OUTPUT
        echo "$status" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

  reverse_proxy_setup:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name:
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        password: ${{ secrets.SSH_PASSWORD }}
        script: |
          set -e
          sudo rm /etc/nginx/sites-enabled/certbot-challenge
          sudo bash -c 'cat > /etc/nginx/sites-available/opencloud << EOF
          # Redirect HTTP to HTTPS
          server {
              listen 80;
              server_name cloud.${{ secrets.HOST }} collabora.${{ secrets.HOST }} wopiserver.${{ secrets.HOST }};

              location /.well-known/acme-challenge/ {
                  root /var/www/certbot;
              }

              location / {
                  return 301 https://\$host\$request_uri;
              }
          }

          # OpenCloud
          server {
              listen 443 ssl;
              server_name cloud.${{ secrets.HOST }};

              ssl_certificate /etc/letsencrypt/live/cloud.${{ secrets.HOST }}/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/cloud.${{ secrets.HOST }}/privkey.pem;

              location / {
                  proxy_pass http://127.0.0.1:9200;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
              }
          }

          # Collabora
          server {
              listen 443 ssl;
              server_name collabora.${{ secrets.HOST }};

              ssl_certificate /etc/letsencrypt/live/cloud.${{ secrets.HOST }}/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/cloud.${{ secrets.HOST }}/privkey.pem;

              location / {
                  proxy_pass http://127.0.0.1:9980;
                  proxy_set_header Host \$host;
              }

              location ~ ^/cool/(.*)/ws\$ {
                  proxy_pass http://127.0.0.1:9980;
                  proxy_set_header Upgrade \$http_upgrade;
                  proxy_set_header Connection "Upgrade";
                  proxy_set_header Host \$host;
              }
          }

          # WOPI Server
          server {
              listen 443 ssl;
              server_name wopiserver.${{ secrets.HOST }};

              ssl_certificate /etc/letsencrypt/live/cloud.${{ secrets.HOST }}/fullchain.pem;
              ssl_certificate_key /etc/letsencrypt/live/cloud.${{ secrets.HOST }}/privkey.pem;

              location / {
                  proxy_pass http://127.0.0.1:9300;
                  proxy_set_header Host \$host;
                  proxy_set_header X-Real-IP \$remote_addr;
                  proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto \$scheme;
              }
          }
          EOF'

    - name: Enable and reload nginx
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        password: ${{ secrets.SSH_PASSWORD }}
        script: |
          set -e
          sudo ln -sf /etc/nginx/sites-available/opencloud /etc/nginx/sites-enabled/
          sudo nginx -t && sudo systemctl restart nginx

    - name: Test Certificate Renewal
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        password: ${{ secrets.SSH_PASSWORD }}
        script: |
          set -e
          sudo certbot renew --dry-run

  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    steps:
    - name: send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        format: markdown
        message: |
          *${{ github.workflow }}*
          Репозиторий: \`${{ github.repository }}\`
          ```
          ${{ needs.deploy.outputs.container_status || 'Не удалось получить статус' }}
          ```
          🔗 https://cloud.${{ secrets.HOST }}
