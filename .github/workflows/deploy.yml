name: Deploy to YC

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  server_prep:
    name: Prepare infra on server
    runs-on: ubuntu-latest
    steps:
    - name: Stop and delete all containers
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          set +e
          docker ps -aq | xargs -r docker stop
          docker ps -aq | xargs -r docker rm
          set -e

    - name: Create projects directory
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          set -e
          sudo rm -rf opencloud-compose || true
          sudo mkdir -p opencloud-compose
          sudo chown -R ${{ secrets.USER }}:${{ secrets.USER }} opencloud-compose
          sudo chmod -R 755 opencloud-compose
    
    - name: Copy project files
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        source: "."
        target: "opencloud-compose"
        rm: true

  deploy:
    runs-on: ubuntu-latest
    needs:
      - server_prep
    outputs:
      container_status: ${{ steps.get_status.outputs.status }}
    steps:
    - name: Deploy containers
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          set -e
          cd opencloud-compose
          docker compose -f docker-compose.yml -f weboffice/collabora.yml -f traefik/opencloud.yml -f traefik/collabora.yml up -d

    - name: Get container status
      id: get_status
      run: |
        sleep 15
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_KEY }}" | tr -d '\r' > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        status=$(ssh -o StrictHostKeyChecking=no \
          -i ~/.ssh/deploy_key \
          ${{ secrets.USER }}@${{ secrets.HOST }} \
          "docker ps -a --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}'")
        echo "status<<EOF" >> $GITHUB_OUTPUT
        echo "$status" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    steps:
    - name: send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        format: markdown
        message: |
          *${{ github.workflow }}*
          Репозиторий: \`${{ github.repository }}\`
          ```
          ${{ needs.deploy.outputs.container_status || 'Не удалось получить статус' }}
          ```