name: Deploy to YC

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  server_prep:
    name: Prepare infra on server
    runs-on: ubuntu-latest
    steps:

    - name: Stop and delete all containers
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        script:
            docker stop $(docker ps -a -q)
            docker rm $(docker ps -a -q)

    - name: Create projects directory
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        script: |
          set -e
          sudo rm -rf openclou-compose || true
          sudo mkdir -p openclou-compose
          sudo chown -R 1000:1000 opencloud
          sudo chmod -R 755 opencloud
    
    - name: Copy project files
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        script: |
            set -e
            # Установка rsync, если его нет
            if ! command -v rsync &> /dev/null; then
                sudo apt-get update -qq && sudo apt-get install -y -qq rsync
            fi
            # Создаем временный архив
            tar -czf /tmp/project.tar.gz .
            
            # Копируем архив на сервер
            scp -o StrictHostKeyChecking=no -i ${{ secrets.SSH_KEY }} /tmp/project.tar.gz ${{ secrets.USER }}@${{ secrets.HOST }}:/tmp/project.tar.gz
            
            # Распаковываем архив на сервере
            ssh -o StrictHostKeyChecking=no -i ${{ secrets.SSH_KEY }} ${{ secrets.USER }}@${{ secrets.HOST }} "
                sudo tar -xzf /tmp/project.tar.gz -C openclou-compose/
                sudo rm /tmp/project.tar.gz
                sudo chown -R 1000:1000 openclou-compose
                sudo chmod -R 755 openclou-compose
            "
            
            # Удаляем локальный архив
            rm /tmp/project.tar.gz

  deploy:
    runs-on: ubuntu-latest
    needs:
      - server_prep
    outputs:
      container_status: ${{ steps.get_status.outputs.status }}
    steps:
    - name: Deploy containers
      uses: appleboy/ssh-action@master
      with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            set -e
            cd opencloud-compose
            
            docker compose -f docker-compose.yml -f weboffice/collabora.yml -f traefik/opencloud.yml -f traefik/collabora.yml up -d

    - name: Get container status
      id: get_status
      run: |
        sleep 15s
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_KEY }}" > ~/.ssh/deploy_key
        chmod 600 ~/.ssh/deploy_key
        status=$(ssh -o StrictHostKeyChecking=no \
        -i ~/.ssh/deploy_key \
        ${{ secrets.USER }}@${{ secrets.HOST }} \
        "sudo docker ps -a --format 'table {{.ID}}\t{{.Names}}\t{{.Status}}\t{{.Ports}}'")
        
        # Format the output with proper line breaks
        formatted_status=$(echo "$status" | awk 'NR>1 {print $0}' | sed 's/%0A/\n/g')
        echo "status<<EOF" >> $GITHUB_OUTPUT
        echo "$formatted_status" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    if: always()
    steps:
    - name: send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        format: markdown
        message: |
          *${{ github.workflow }}*
          Репозиторий: \`${{ github.repository }}\`
          
          ```
          ${{ needs.deploy.outputs.container_status || 'Не удалось получить статус' }}
          ```
          